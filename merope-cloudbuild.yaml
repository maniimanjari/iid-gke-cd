steps:
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'set-up'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ##export PROJECT_ID=cc-bo-portals-devtest-01
      export PROJECT_ID=$_CLOUDSDK_CORE_PROJECT

      gcloud container clusters get-credentials $_CLOUDSDK_CONTAINER_CLUSTER --region $_CLOUDSDK_COMPUTE_ZONE --project $PROJECT_ID

      ##Clean
      ##kubectl delete secret iid-pub-sa-key
      ##gcloud projects remove-iam-policy-binding $PROJECT_ID --role "roles/pubsub.editor"  --member "serviceAccount:iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com"
      ##gcloud iam service-accounts delete -q  iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com

      if [[  $_CLOUDSDK_COMPUTE_ZONE == *"central"* ]]; then
          vcert=$(kubectl get managedcertificate merope-managed-cert | grep 'merope-managed-cert')
          echo "vcert  >>> $vcert "
          if [[ ! $vcert == *"merope-managed-cert"* ]]; then
              echo "certificate not exist on central"
              kubectl apply -f ./managed-certificates/merope-google-managed.yaml
          fi
      fi
      if [[  $_CLOUDSDK_COMPUTE_ZONE == *"west"* ]]; then
          vcert=$(kubectl get managedcertificate merope-managed-cert-west | grep 'merope-managed-cert-west')
          if [[ ! $vcert == *"merope-managed-cert-west"* ]]; then
              echo "certificate not exist on west"
              kubectl apply -f ./managed-certificates/merope.google-managed-west.yaml
          fi
      fi
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['-']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'merope-config'
  args: ['apply', '-f', 'config/merope-services.yaml']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['set-up']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'merope-deploy'
  args: ['apply', '-f', 'merope-app-service']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['set-up']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-ingress'
  args: ['apply', '-f', '${_CLOUDSDK_CONTAINER_INGRESS}']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['set-up','merope-config','merope-deploy']

timeout: 600s
options:
  workerPool: 'projects/cc-bo-portals-devtest-01/locations/us-central1/workerPools/cloud-build-private-pool'
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _CLOUDSDK_CORE_PROJECT: 'cc-bo-portals-devtest-01'
  _CLOUDSDK_COMPUTE_ZONE: 'us-central1'
  _CLOUDSDK_CONTAINER_CLUSTER: 'us-central1-cluster-1'
  _CLOUDSDK_CONTAINER_INGRESS: 'ingress-central'
#West
  #_CLOUDSDK_CORE_PROJECT: 'cc-bo-portals-devtest-01'
  #_CLOUDSDK_COMPUTE_ZONE: 'us-west1'
  #_CLOUDSDK_CONTAINER_CLUSTER: 'us-west1-cluster-1'
  #_CLOUDSDK_CONTAINER_INGRESS: 'ingress-west'
  #_APPLICTION_PROFILE: 'qa,den06-qa'
  #testing
