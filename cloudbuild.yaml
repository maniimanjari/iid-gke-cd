steps:
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'set-up'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ##export PROJECT_ID=cc-bo-portals-devtest-01
      export PROJECT_ID=$_CLOUDSDK_CORE_PROJECT

      gcloud container clusters get-credentials $_CLOUDSDK_CONTAINER_CLUSTER --region $_CLOUDSDK_COMPUTE_ZONE --project $PROJECT_ID

      ##Clean
      ##kubectl delete secret iid-pub-sa-key
      ##gcloud projects remove-iam-policy-binding $PROJECT_ID --role "roles/pubsub.editor"  --member "serviceAccount:iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com"
      ##gcloud iam service-accounts delete -q  iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com

      vuser=$(gcloud iam service-accounts describe iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com | grep 'iid-pub-sa')
      echo "vuser  >>> $vuser "
      if [[ ! $vuser == *"iid-pub-sa"* ]]; then
          echo "user not exist >>> create user "
          gcloud iam service-accounts create iid-pub-sa --display-name "service account for publishing/subscribing messages"
      fi

      vrole=$(gcloud projects get-iam-policy $PROJECT_ID --flatten="bindings[].members" --format="table(bindings.role)" --filter="bindings.members:iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com" | grep 'roles/pubsub.editor')
      echo "vrole  >>> $vrole "
      if [[ ! $vrole == *"roles/pubsub.editor"* ]]; then
        echo "role not exist"
        gcloud projects add-iam-policy-binding $_PROJECT_IDT --role "roles/pubsub.editor"  --member "serviceAccount:iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com"
      fi

      vkey=$(kubectl describe secrets/iid-pub-sa-key | grep 'gkey.json')
      echo "vkey  >>> $vkey "
      if [[ ! $vkey == *"gkey.json"* ]]; then
          echo "not exist"
          gcloud iam service-accounts keys create ./pubkey.json --iam-account iid-pub-sa@$PROJECT_ID.iam.gserviceaccount.com
          kubectl create secret generic iid-pub-sa-key --from-file=gkey.json=./pubkey.json  || exit 0
      fi

      if [[  $_CLOUDSDK_COMPUTE_ZONE == *"central"* ]]; then
          vcert=$(kubectl get managedcertificate iid-managed-cert | grep 'iid-managed-cert')
          echo "vcert  >>> $vcert "
          if [[ ! $vcert == *"iid-managed-cert"* ]]; then
              echo "certificate not exist on central"
              kubectl apply -f ./managed-certificates/google-managed.yaml
          fi
      fi
      if [[  $_CLOUDSDK_COMPUTE_ZONE == *"west"* ]]; then
          vcert=$(kubectl get managedcertificate iid-managed-cert-west | grep 'iid-managed-cert-west')
          if [[ ! $vcert == *"iid-managed-cert-west"* ]]; then
              echo "certificate not exist on west"
              kubectl apply -f ./managed-certificates/google-managed-west.yaml
          fi
      fi
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['-']

- name: 'ubuntu'
  id: 'prepare-build'
  args: ['bash', './prepare-build.sh']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
    - '_APPLICTION_PROFILE=${_APPLICTION_PROFILE}'
  waitFor:
    - '-'

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'env-config'
  args: ['apply', '-f', 'env-config']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
    - '_APPLICTION_PROFILE=${_APPLICTION_PROFILE}'
  waitFor: ['prepare-build']


- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-filebeat-central'
  args: ['apply', '-f', 'filebeat']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['-']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-configs'
  args: ['apply', '-f', 'config']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['-']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'dps-alert-monitor'
  args: ['apply', '-f', 'dps-alert-monitor']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['-']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-apis'
  args: ['apply', '-f', 'stage-apis']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['set-up','push-configs','prepare-build']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-portals'
  args: ['apply', '-f', 'stage-portals']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['prepare-build','set-up','push-configs','push-apis']

- name: 'gcr.io/cloud-builders/kubectl'
  id: 'push-ingress'
  args: ['apply', '-f', '${_CLOUDSDK_CONTAINER_INGRESS}']
  env:
    - 'CLOUDSDK_CORE_PROJECT=${_CLOUDSDK_CORE_PROJECT}'
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
  waitFor: ['set-up','prepare-build','push-configs','push-apis','push-portals']

timeout: 600s
options:
  workerPool: 'projects/cc-bo-portals-devtest-01/locations/us-central1/workerPools/cloud-build-private-pool'
  logging: CLOUD_LOGGING_ONLY
substitutions:
  #_CLOUDSDK_CORE_PROJECT: 'cc-bo-portals-devtest-01'
  #_CLOUDSDK_COMPUTE_ZONE: 'us-central1'
  #_CLOUDSDK_CONTAINER_CLUSTER: 'us-central1-cluster-1'
  #_CLOUDSDK_CONTAINER_INGRESS: 'ingress-central'
  #_APPLICTION_PROFILE: 'qa,swn01-qa'
#West
  _CLOUDSDK_CORE_PROJECT: 'cc-bo-portals-devtest-01'
  _CLOUDSDK_COMPUTE_ZONE: 'us-west1'
  _CLOUDSDK_CONTAINER_CLUSTER: 'us-west1-cluster-1'
  _CLOUDSDK_CONTAINER_INGRESS: 'ingress-west'
  _APPLICTION_PROFILE: 'qa,den06-qa'
  #testing
